#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  labels:
    app: {{ .Release.Name }}-api
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      name: {{ .Release.Name }}-api
      labels:
        app: {{ .Release.Name }}-api
    spec:
      serviceAccountName: galasa
      nodeSelector:
        kubernetes.io/arch: {{ .Values.architecture }}
        {{- if .Values.nodeSelectors }}
{{ toYaml .Values.nodeSelectors | indent 8 }}
        {{- end }}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Release.Name }}-api
            topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: init-chown-data
        image: {{ .Values.galasaRegistry }}/{{ .Values.galasaBootImage }}:{{ .Values.galasaVersion }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        command: ["chown", "-v", "1000", "/data"]
        volumeMounts:
        - name: data
          mountPath: /data
          subPath: ""
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
      - name: wait-for-etcd
        image: {{ .Values.kubectlImage }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        command:
          - kubectl
        args:
          - wait
          - pods
          - -l=app={{ .Release.Name }}-etcd
          - --for=condition=Ready
          - --timeout=90s
      - name: wait-for-ras
        image: {{ .Values.kubectlImage }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        command:
          - kubectl
        args:
          - wait
          - pods
          - -l=app={{ .Release.Name }}-ras
          - --for=condition=Ready
          - --timeout=90s
      - name: wait-for-dex
        image: {{ .Values.kubectlImage }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        command:
          - kubectl
        args:
          - wait
          - pods
          - -l=app={{ .Release.Name }}-dex
          - --for=condition=Ready
          - --timeout=90s
      containers:
      - name: api
        image: {{ .Values.galasaRegistry }}/{{ .Values.galasaBootImage }}:{{ .Values.galasaVersion }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        command: ["java"]
        args:
        - -jar
        - boot.jar
        - --obr
        - file:galasa.obr
        - --trace
        - --api
        - --bootstrap
        - file:/bootstrap.properties
        env:
        - name: GALASA_CONFIG_STORE
          value: etcd:http://{{ .Release.Name }}-etcd:2379
        - name: GALASA_DYNAMICSTATUS_STORE
          value: etcd:http://{{ .Release.Name }}-etcd:2379
        - name: GALASA_RESULTARCHIVE_STORE
          value: couchdb:http://{{ .Release.Name }}-couchdb:5984
        - name: GALASA_CREDENTIALS_STORE
          value: etcd:http://{{ .Release.Name }}-etcd:2379
        - name: GALASA_DEX_ISSUER
          value: {{ .Values.dex.config.issuer }}
        - name: GALASA_DEX_GRPC_HOSTNAME
          value: {{ .Release.Name }}-dex:5557
        - name: GALASA_EXTERNAL_API_URL
          value: {{ empty .Values.ingress.tls | ternary "http" "https" }}://{{ .Values.externalHostname }}/api
        ports:
        - containerPort: 9010
          name: metrics
        - containerPort: 9011
          name: health
        - containerPort: 8080
          name: http
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /bootstrap
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: bootstrap
          mountPath: /bootstrap.properties
          subPath: bootstrap.properties
        - name: testcatalog
          mountPath: /galasa/load/dev.galasa.testcatalog.cfg
          subPath: dev.galasa.testcatalog.cfg
        - name: data
          mountPath: /galasa/testcatalog
      volumes:
      - name: bootstrap
        configMap:
          name: {{ .Release.Name }}-bootstrap-file
      - name: testcatalog
        configMap:
          name: {{ .Release.Name }}-testcatalog-file
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-pvc-testcatalog
