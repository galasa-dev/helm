#
# Copyright contributors to the Galasa project
#
# SPDX-License-Identifier: EPL-2.0
#
# This StatefulSet definition is based on the example provided in https://etcd.io/docs/v3.5/op-guide/kubernetes/
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-etcd
  labels:
    app: {{ .Release.Name }}-etcd
spec:
  serviceName: {{ .Release.Name }}-etcd
  ##
  ## If you are increasing the replica count of an existing cluster, you should
  ## also update the --initial-cluster-state flag as noted further down in the
  ## container configuration.
  replicas: 1
  ##
  ## For initialization, the etcd pods must be available to eachother before
  ## they are "ready" for traffic. The "Parallel" policy makes this possible.
  podManagementPolicy: Parallel
  ##
  ## To ensure availability of the etcd cluster, the rolling update strategy
  ## is used. For availability, there must be at least 51% of the etcd nodes
  ## online at any given time.
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Release.Name }}-etcd
  template:
    metadata:
      name: {{ .Release.Name }}-etcd
      labels:
        app: {{ .Release.Name }}-etcd
      annotations:
        serviceName: {{ .Release.Name }}-etcd
    spec:
      nodeSelector:
        kubernetes.io/arch: {{ .Values.architecture }}
        {{- if .Values.nodeSelectors }}
{{ toYaml .Values.nodeSelectors | indent 8 }}
        {{- end }}
      containers:
      - name: etcd
        image: {{ .Values.etcdImage }}
        imagePullPolicy: IfNotPresent
        ports:
        - name: etcd-client
          containerPort: 2379
        - name: etcd-server
          containerPort: 2380
        - name: etcd-metrics
          containerPort: 8080
        env:
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
             fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
             fieldPath: metadata.name
        - name: SERVICE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['serviceName']
        - name: ETCDCTL_ENDPOINTS
          value: $(HOSTNAME).$(SERVICE_NAME):2379
        - name: URI_SCHEME
          value: "http"
        command:
        - /usr/local/bin/etcd
        args:
        ##
        ## Configure the name of the etcd server.
        - --name=$(HOSTNAME)
        ##
        ## Configure etcd to use the persistent storage configured below.
        - --data-dir=/var/run/etcd/default.etcd
        ##
        - --listen-peer-urls=$(URI_SCHEME)://0.0.0.0:2380
        - --listen-client-urls=$(URI_SCHEME)://0.0.0.0:2379
        - --advertise-client-urls=$(URI_SCHEME)://$(HOSTNAME).$(SERVICE_NAME):2379
        ##
        ## This must be set to "new" for initial cluster bootstrapping. To scale
        ## the cluster up, this should be changed to "existing" when the replica
        ## count is increased. If set incorrectly, etcd makes an attempt to
        ## start but fail safely.
        - --initial-cluster-state=new
        ##
        ## Token used for cluster initialization. The recommendation for this is
        ## to use a unique token for every cluster. This is parameterized
        ## to be unique to the namespace, but if you are deploying multiple etcd
        ## clusters in the same namespace, you should do something extra to
        ## ensure uniqueness amongst clusters.
        - --initial-cluster-token=etcd-$(K8S_NAMESPACE)
        ##
        ## The initial cluster flag needs to be updated to match the number of
        ## replicas configured. When combined, these are a little hard to read.
        ## Here is what a single parameterized peer looks like:
        ##   etcd-0=$(URI_SCHEME)://etcd-0.$(SERVICE_NAME):2380
        - --initial-cluster=$(HOSTNAME)=$(URI_SCHEME)://$(HOSTNAME).$(SERVICE_NAME):2380
        ##
        - --initial-advertise-peer-urls=$(URI_SCHEME)://$(HOSTNAME).$(SERVICE_NAME):2380
        - --listen-metrics-urls=http://0.0.0.0:8080
        ##
        ## Turn on automatic compaction to periodically clean up property revisions
        - --auto-compaction-mode=periodic
        - --auto-compaction-retention={{ .Values.etcdHistoryRetention }}
        volumeMounts:
        - name: data
          mountPath: /var/run/etcd
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      {{- if .Values.storageClass }}
      storageClassName: {{ .Values.storageClass }}
      {{- end }}
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: {{ .Values.etcdDiskSize }}
